name: Build

on:
  create:
    tags:
      -v*
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: "Debug build"
    strategy:
      matrix:
        include:
          - name: Linux GCC
            os: ubuntu-latest
            compiler: g++-9
            test: true

          - name: Linux Clang
            os: ubuntu-latest
            compiler: clang++
            test: true

          - name: MacOS clang
            os: macos-latest
            compiler: clang++
            test: true

          #- name: Windows MSVC
            #os: windows-latest
            #compiler: cl
            #test: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2

      - name: "Enable MSVC command prompt"
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: "Install cmake"
        uses: lukka/get-cmake@latest

      - name: "Build debug mode"
        run: >
          mkdir build;
          cd build;
          cmake .. -DCMAKE_CXX_COMPILER=${{ matrix.compiler }};
          cmake --build . --config Debug;

  # Create a release on new v* tags
  release:
    needs: test
    if: ${{ github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') }}
    name: "Create release"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: "Create release"
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build artifact for the release
  package:
    name: "Build packages"
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_path: build/json-tui*Linux*
          - os: macos-latest
            asset_path: build/json-tui*Darwin*
          #- os: windows-latest
            #asset_path: build/json-tui*Win64*
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2

      - name: "Install cmake"
        uses: lukka/get-cmake@latest

      - name: "Build packages"
        run: >
          mkdir build;
          cd build;
          cmake .. -DCMAKE_BUILD_TYPE=Release;
          cmake --build . --config Release --target package;
      - uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_path }}
          overwrite: true
